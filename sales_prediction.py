# -*- coding: utf-8 -*-
"""Sales_Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eb2yxcdNRo2feyY6c9d2En8bCspOxJF1
"""

pip install plotly

import os
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objs as go
from plotly.offline import iplot

from google.colab import files
uploaded = files.upload()

for file in uploaded:
    print(file)

file_names = ['Sales_April_2019.csv', 'Sales_August_2019.csv','Sales_December_2019.csv','Sales_February_2019.csv','Sales_January_2019.csv','Sales_July_2019.csv','Sales_June_2019.csv','Sales_March_2019.csv','Sales_May_2019.csv','Sales_November_2019.csv','Sales_October_2019.csv','Sales_September_2019.csv']  # List of your uploaded file names

# Create an empty list to hold DataFrames from each file
dfs = []

# Loop through each file, read it into a DataFrame, and append it to the list
for file_name in file_names:
    df = pd.read_csv(file_name)
    dfs.append(df)

# Combine all DataFrames in the list into a single DataFrame
all_data = pd.concat(dfs, ignore_index=True)

all_data.to_csv('all_data.csv', index=False)

all_data.head(10)

all_data.shape

all_data.dtypes

all_data.isnull().sum()

all_data = all_data.dropna(how='all')
all_data.shape

all_data.head()

"""**Best month for Sales**"""

#We have to get best month for sales
#For this we have to access month which can be accessed through Date column
'04/19/19 08:46'.split('/')[0]
#splitting on the basis of / and checking the 0th index

def month(x):
    return x.split('/')[0]

"""**add month column**"""

#Getting Month from order date and appending it in month column
all_data['Month']=all_data['Order Date'].apply(month)

all_data.dtypes

all_data['Month'].unique()

filter=all_data['Month']=='Order Date'
len(all_data[~filter])

all_data=all_data[~filter]

all_data.shape

all_data.head()

all_data['Month']=all_data['Month'].astype(int)

all_data.dtypes

all_data['Price Each']=all_data['Price Each'].astype(float)

all_data['Quantity Ordered']=all_data['Quantity Ordered'].astype(int)

all_data['sales']=all_data['Quantity Ordered']*all_data['Price Each']
all_data.head(5)

all_data.groupby('Month')['sales'].sum()

months=range(1,13)
plt.bar(months,all_data.groupby('Month')['sales'].sum())
plt.xticks(months)
plt.ylabel('Sales in USD ($)')
plt.xlabel('Month number')
plt.show()

"""**Which city has max order**"""

'917 1st St, Dallas, TX 75001'.split(',')[1]

def city(x):
    return x.split(',')[1]

all_data['city']=all_data['Purchase Address'].apply(city)

all_data.groupby('city')['city'].count()

plt.bar(all_data.groupby('city')['city'].count().index,all_data.groupby('city')['city'].count())
plt.xticks(rotation='vertical')
plt.ylabel('received orders')
plt.xlabel('city names')
plt.show()

"""**What time should we display advertisements to maximise for product purchase?**"""

all_data['Hour'] = pd.to_datetime(all_data['Order Date']).dt.hour

keys=[]
hour=[]
for key,hour_df in all_data.groupby('Hour'):
    keys.append(key)
    hour.append(len(hour_df))

plt.grid()
plt.plot(keys,hour)

"""**What product sold the most? & Why?**"""

all_data.groupby('Product')['Quantity Ordered'].sum().plot(kind='bar')

all_data.groupby('Product')['Price Each'].mean()

products=all_data.groupby('Product')['Quantity Ordered'].sum().index
quantity=all_data.groupby('Product')['Quantity Ordered'].sum()
prices=all_data.groupby('Product')['Price Each'].mean()

plt.figure(figsize=(40,24))
fig,ax1 = plt.subplots()
ax2=ax1.twinx()
ax1.bar(products, quantity, color='g')
ax2.plot(products, prices, 'b-')
ax1.set_xticklabels(products, rotation='vertical', size=8)

"""**The top selling product is 'AAA Batteries'. The top selling products seem to have a correlation with the price of the product. The cheaper the product higher the quantity ordered and vice versa**"""

all_data.shape

"""**What products are most often sold together?
note: keep orders that have same order Id,are sold mostly together**
"""

df=all_data[all_data['Order ID'].duplicated(keep=False)]
df.head(20)

#create grouped col
df['Grouped'] = df.groupby('Order ID')['Product'].transform(lambda x: ','.join(x))

df.head()

df.shape

#lets drop out all duplicate Order ID
df2 = df.drop_duplicates(subset=['Order ID'])

df2['Grouped'].value_counts()[0:5].plot.pie()

values=df2['Grouped'].value_counts()[0:5]
labels=df['Grouped'].value_counts()[0:5].index

trace=go.Pie(labels=labels, values=values,
               hoverinfo='label+percent', textinfo='value',
               textfont=dict(size=25),
              pull=[0, 0, 0,0.2, 0]
               )

iplot([trace])

